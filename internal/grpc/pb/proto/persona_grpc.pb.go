// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: proto/persona.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PersonaService_CreatePersona_FullMethodName = "/persona.PersonaService/CreatePersona"
	PersonaService_GetPersona_FullMethodName    = "/persona.PersonaService/GetPersona"
	PersonaService_ListPersonas_FullMethodName  = "/persona.PersonaService/ListPersonas"
	PersonaService_UpdatePersona_FullMethodName = "/persona.PersonaService/UpdatePersona"
	PersonaService_DeletePersona_FullMethodName = "/persona.PersonaService/DeletePersona"
)

// PersonaServiceClient is the client API for PersonaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// PersonaService provides CRUD operations for AI personas
type PersonaServiceClient interface {
	CreatePersona(ctx context.Context, in *CreatePersonaRequest, opts ...grpc.CallOption) (*CreatePersonaResponse, error)
	GetPersona(ctx context.Context, in *GetPersonaRequest, opts ...grpc.CallOption) (*GetPersonaResponse, error)
	ListPersonas(ctx context.Context, in *ListPersonasRequest, opts ...grpc.CallOption) (*ListPersonasResponse, error)
	UpdatePersona(ctx context.Context, in *UpdatePersonaRequest, opts ...grpc.CallOption) (*UpdatePersonaResponse, error)
	DeletePersona(ctx context.Context, in *DeletePersonaRequest, opts ...grpc.CallOption) (*DeletePersonaResponse, error)
}

type personaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPersonaServiceClient(cc grpc.ClientConnInterface) PersonaServiceClient {
	return &personaServiceClient{cc}
}

func (c *personaServiceClient) CreatePersona(ctx context.Context, in *CreatePersonaRequest, opts ...grpc.CallOption) (*CreatePersonaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePersonaResponse)
	err := c.cc.Invoke(ctx, PersonaService_CreatePersona_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personaServiceClient) GetPersona(ctx context.Context, in *GetPersonaRequest, opts ...grpc.CallOption) (*GetPersonaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPersonaResponse)
	err := c.cc.Invoke(ctx, PersonaService_GetPersona_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personaServiceClient) ListPersonas(ctx context.Context, in *ListPersonasRequest, opts ...grpc.CallOption) (*ListPersonasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPersonasResponse)
	err := c.cc.Invoke(ctx, PersonaService_ListPersonas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personaServiceClient) UpdatePersona(ctx context.Context, in *UpdatePersonaRequest, opts ...grpc.CallOption) (*UpdatePersonaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePersonaResponse)
	err := c.cc.Invoke(ctx, PersonaService_UpdatePersona_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personaServiceClient) DeletePersona(ctx context.Context, in *DeletePersonaRequest, opts ...grpc.CallOption) (*DeletePersonaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePersonaResponse)
	err := c.cc.Invoke(ctx, PersonaService_DeletePersona_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PersonaServiceServer is the server API for PersonaService service.
// All implementations must embed UnimplementedPersonaServiceServer
// for forward compatibility.
//
// PersonaService provides CRUD operations for AI personas
type PersonaServiceServer interface {
	CreatePersona(context.Context, *CreatePersonaRequest) (*CreatePersonaResponse, error)
	GetPersona(context.Context, *GetPersonaRequest) (*GetPersonaResponse, error)
	ListPersonas(context.Context, *ListPersonasRequest) (*ListPersonasResponse, error)
	UpdatePersona(context.Context, *UpdatePersonaRequest) (*UpdatePersonaResponse, error)
	DeletePersona(context.Context, *DeletePersonaRequest) (*DeletePersonaResponse, error)
	mustEmbedUnimplementedPersonaServiceServer()
}

// UnimplementedPersonaServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPersonaServiceServer struct{}

func (UnimplementedPersonaServiceServer) CreatePersona(context.Context, *CreatePersonaRequest) (*CreatePersonaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePersona not implemented")
}
func (UnimplementedPersonaServiceServer) GetPersona(context.Context, *GetPersonaRequest) (*GetPersonaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPersona not implemented")
}
func (UnimplementedPersonaServiceServer) ListPersonas(context.Context, *ListPersonasRequest) (*ListPersonasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPersonas not implemented")
}
func (UnimplementedPersonaServiceServer) UpdatePersona(context.Context, *UpdatePersonaRequest) (*UpdatePersonaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePersona not implemented")
}
func (UnimplementedPersonaServiceServer) DeletePersona(context.Context, *DeletePersonaRequest) (*DeletePersonaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePersona not implemented")
}
func (UnimplementedPersonaServiceServer) mustEmbedUnimplementedPersonaServiceServer() {}
func (UnimplementedPersonaServiceServer) testEmbeddedByValue()                        {}

// UnsafePersonaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PersonaServiceServer will
// result in compilation errors.
type UnsafePersonaServiceServer interface {
	mustEmbedUnimplementedPersonaServiceServer()
}

func RegisterPersonaServiceServer(s grpc.ServiceRegistrar, srv PersonaServiceServer) {
	// If the following call pancis, it indicates UnimplementedPersonaServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PersonaService_ServiceDesc, srv)
}

func _PersonaService_CreatePersona_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePersonaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonaServiceServer).CreatePersona(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonaService_CreatePersona_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonaServiceServer).CreatePersona(ctx, req.(*CreatePersonaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonaService_GetPersona_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPersonaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonaServiceServer).GetPersona(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonaService_GetPersona_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonaServiceServer).GetPersona(ctx, req.(*GetPersonaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonaService_ListPersonas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPersonasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonaServiceServer).ListPersonas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonaService_ListPersonas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonaServiceServer).ListPersonas(ctx, req.(*ListPersonasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonaService_UpdatePersona_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePersonaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonaServiceServer).UpdatePersona(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonaService_UpdatePersona_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonaServiceServer).UpdatePersona(ctx, req.(*UpdatePersonaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonaService_DeletePersona_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePersonaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonaServiceServer).DeletePersona(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonaService_DeletePersona_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonaServiceServer).DeletePersona(ctx, req.(*DeletePersonaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PersonaService_ServiceDesc is the grpc.ServiceDesc for PersonaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PersonaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "persona.PersonaService",
	HandlerType: (*PersonaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePersona",
			Handler:    _PersonaService_CreatePersona_Handler,
		},
		{
			MethodName: "GetPersona",
			Handler:    _PersonaService_GetPersona_Handler,
		},
		{
			MethodName: "ListPersonas",
			Handler:    _PersonaService_ListPersonas_Handler,
		},
		{
			MethodName: "UpdatePersona",
			Handler:    _PersonaService_UpdatePersona_Handler,
		},
		{
			MethodName: "DeletePersona",
			Handler:    _PersonaService_DeletePersona_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/persona.proto",
}
